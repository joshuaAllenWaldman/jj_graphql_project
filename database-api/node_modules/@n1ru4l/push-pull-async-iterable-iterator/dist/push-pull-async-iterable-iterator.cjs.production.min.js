"use strict";function r(){const r={};return r.promise=new Promise((e,t)=>{r.resolve=e,r.reject=t}),r}const e=Symbol(),t=Symbol();function o(){let o=!0;const n=[];let s=r(),a=r();const c=async function*(){for(;;)if(n.length>0)yield n.shift();else{const r=await Promise.race([s.promise,a.promise]);if(r===e)break;if(r!==t)throw r}}(),l=c.return.bind(c);c.return=(...r)=>(o=!1,a.resolve(e),l(...r));const i=c.throw.bind(c);return c.throw=r=>(o=!1,a.resolve(r),i(r)),{pushValue:function(e){!1!==o&&(n.push(e),s.resolve(t),s=r())},asyncIterableIterator:c}}exports.applyAsyncIterableIteratorToSink=function(r,e){return(async()=>{try{for await(const t of r)e.next(t);e.complete()}catch(r){e.error(r)}})(),()=>{null==r.return||r.return()}},exports.isAsyncIterable=function(r){return"object"==typeof r&&null!==r&&("AsyncGenerator"===r[Symbol.toStringTag]||Symbol.asyncIterator&&Symbol.asyncIterator in r)},exports.makeAsyncIterableIteratorFromSink=r=>{const{pushValue:e,asyncIterableIterator:t}=o(),n=r({next:r=>{e(r)},complete:()=>{t.return()},error:r=>{t.throw(r)}}),s=t.return;let a=void 0;return t.return=()=>(void 0===a&&(n(),a=s()),a),t},exports.makePushPullAsyncIterableIterator=o;
//# sourceMappingURL=push-pull-async-iterable-iterator.cjs.production.min.js.map
