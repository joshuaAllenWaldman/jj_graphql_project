{"version":3,"file":"push-pull-async-iterable-iterator.cjs.production.min.js","sources":["../src/makePushPullAsyncIterableIterator.ts","../src/applyAsyncIterableIteratorToSink.ts","../src/isAsyncIterable.ts","../src/makeAsyncIterableIteratorFromSink.ts"],"sourcesContent":["type Deferred<T> = {\r\n  resolve: (value: T) => void;\r\n  reject: (value: unknown) => void;\r\n  promise: Promise<T>;\r\n};\r\n\r\nfunction createDeferred<T>(): Deferred<T> {\r\n  const d = {} as Deferred<T>;\r\n  d.promise = new Promise<T>((resolve, reject) => {\r\n    d.resolve = resolve;\r\n    d.reject = reject;\r\n  });\r\n  return d;\r\n}\r\n\r\nexport type PushPullAsyncIterableIterator<T> = {\r\n  /* Push a new value that will be published on the AsyncIterableIterator. */\r\n  pushValue: (value: T) => void;\r\n  /* AsyncIterableIterator that publishes the values pushed on the stack with pushValue. */\r\n  asyncIterableIterator: AsyncIterableIterator<T>;\r\n};\r\n\r\nconst SYMBOL_FINISHED = Symbol();\r\nconst SYMBOL_NEW_VALUE = Symbol();\r\n\r\n/**\r\n * makePushPullAsyncIterableIterator\r\n *\r\n * The iterable will publish values until return or throw is called.\r\n * Afterwards it is in the completed state and cannot be used for publishing any further values.\r\n * It will handle back-pressure and keep pushed values until they are consumed by a source.\r\n */\r\nexport function makePushPullAsyncIterableIterator<\r\n  T\r\n>(): PushPullAsyncIterableIterator<T> {\r\n  let isRunning = true;\r\n  const values: Array<T> = [];\r\n\r\n  let newValueD = createDeferred<typeof SYMBOL_NEW_VALUE>();\r\n  let finishedD = createDeferred<typeof SYMBOL_FINISHED | any>();\r\n\r\n  const asyncIterableIterator = (async function* PushPullAsyncIterableIterator(): AsyncIterableIterator<\r\n    T\r\n  > {\r\n    while (true) {\r\n      if (values.length > 0) {\r\n        yield values.shift()!;\r\n      } else {\r\n        const result = await Promise.race([\r\n          newValueD.promise,\r\n          finishedD.promise\r\n        ]);\r\n\r\n        if (result === SYMBOL_FINISHED) {\r\n          break;\r\n        }\r\n        if (result !== SYMBOL_NEW_VALUE) {\r\n          throw result;\r\n        }\r\n      }\r\n    }\r\n  })();\r\n\r\n  function pushValue(value: T) {\r\n    if (isRunning === false) {\r\n      // TODO: Should this throw?\r\n      return;\r\n    }\r\n\r\n    values.push(value);\r\n    newValueD.resolve(SYMBOL_NEW_VALUE);\r\n    newValueD = createDeferred();\r\n  }\r\n\r\n  // We monkey patch the original generator for clean-up\r\n  const originalReturn = asyncIterableIterator.return!.bind(\r\n    asyncIterableIterator\r\n  );\r\n\r\n  asyncIterableIterator.return = (\r\n    ...args\r\n  ): Promise<IteratorResult<T, void>> => {\r\n    isRunning = false;\r\n    finishedD.resolve(SYMBOL_FINISHED);\r\n    return originalReturn(...args);\r\n  };\r\n\r\n  const originalThrow = asyncIterableIterator.throw!.bind(\r\n    asyncIterableIterator\r\n  );\r\n  asyncIterableIterator.throw = (err): Promise<IteratorResult<T, void>> => {\r\n    isRunning = false;\r\n    finishedD.resolve(err);\r\n    return originalThrow(err);\r\n  };\r\n\r\n  return {\r\n    pushValue,\r\n    asyncIterableIterator\r\n  };\r\n}\r\n","import { Sink } from \"./Sink\";\r\n\r\nexport function applyAsyncIterableIteratorToSink<\r\n  TValue = unknown,\r\n  TError = unknown\r\n>(\r\n  asyncIterableIterator: AsyncIterableIterator<TValue>,\r\n  sink: Sink<TValue, TError>\r\n): () => void {\r\n  const run = async () => {\r\n    try {\r\n      for await (const value of asyncIterableIterator) {\r\n        sink.next(value);\r\n      }\r\n      sink.complete();\r\n    } catch (err) {\r\n      sink.error(err);\r\n    }\r\n  };\r\n  run();\r\n\r\n  return () => {\r\n    asyncIterableIterator.return?.();\r\n  };\r\n}\r\n","export function isAsyncIterable(\r\n  input: unknown\r\n): input is AsyncIterator<unknown> | AsyncIterableIterator<unknown> {\r\n  return (\r\n    typeof input === \"object\" &&\r\n    input !== null &&\r\n    // The AsyncGenerator check is for Safari on iOS which currently does not have\r\n    // Symbol.asyncIterator implemented\r\n    // That means every custom AsyncIterable must be built using a AsyncGeneratorFunction (async function * () {})\r\n    ((input as any)[Symbol.toStringTag] === \"AsyncGenerator\" ||\r\n      (Symbol.asyncIterator && Symbol.asyncIterator in input))\r\n  );\r\n}\r\n","import { makePushPullAsyncIterableIterator } from \"./makePushPullAsyncIterableIterator\";\r\nimport { Sink } from \"./Sink\";\r\n\r\nexport const makeAsyncIterableIteratorFromSink = <\r\n  TValue = unknown,\r\n  TError = unknown\r\n>(\r\n  make: (sink: Sink<TValue, TError>) => () => void\r\n): AsyncIterableIterator<TValue> => {\r\n  const {\r\n    pushValue,\r\n    asyncIterableIterator\r\n  } = makePushPullAsyncIterableIterator<TValue>();\r\n  const dispose = make({\r\n    next: (value: TValue) => {\r\n      pushValue(value);\r\n    },\r\n    complete: () => {\r\n      asyncIterableIterator.return!();\r\n    },\r\n    error: (err: TError) => {\r\n      asyncIterableIterator.throw!(err);\r\n    }\r\n  });\r\n  const originalReturn = asyncIterableIterator.return!;\r\n  let returnValue: ReturnType<typeof originalReturn> | undefined = undefined;\r\n  asyncIterableIterator.return = () => {\r\n    if (returnValue === undefined) {\r\n      dispose();\r\n      returnValue = originalReturn();\r\n    }\r\n    return returnValue;\r\n  };\r\n  return asyncIterableIterator;\r\n};\r\n"],"names":["createDeferred","d","promise","Promise","resolve","reject","SYMBOL_FINISHED","Symbol","SYMBOL_NEW_VALUE","makePushPullAsyncIterableIterator","isRunning","values","newValueD","finishedD","asyncIterableIterator","async","length","shift","result","race","originalReturn","return","bind","args","originalThrow","throw","err","pushValue","value","push","sink","next","complete","error","run","input","toStringTag","asyncIterator","make","dispose","returnValue","undefined"],"mappings":"aAMA,SAASA,UACDC,EAAI,UACVA,EAAEC,QAAU,IAAIC,QAAW,CAACC,EAASC,KACnCJ,EAAEG,QAAUA,EACZH,EAAEI,OAASA,IAENJ,EAUT,MAAMK,EAAkBC,SAClBC,EAAmBD,kBASTE,QAGVC,GAAY,QACVC,EAAmB,OAErBC,EAAYZ,IACZa,EAAYb,UAEVc,EAAyBC,4BAIvBJ,EAAOK,OAAS,QACZL,EAAOM,YACR,OACCC,QAAef,QAAQgB,KAAK,CAChCP,EAAUV,QACVW,EAAUX,aAGRgB,IAAWZ,WAGXY,IAAWV,QACPU,GAhBiBH,GAkCzBK,EAAiBN,EAAsBO,OAAQC,KACnDR,GAGFA,EAAsBO,OAAS,IAC1BE,KAEHb,GAAY,EACZG,EAAUT,QAAQE,GACXc,KAAkBG,UAGrBC,EAAgBV,EAAsBW,MAAOH,KACjDR,UAEFA,EAAsBW,MAASC,IAC7BhB,GAAY,EACZG,EAAUT,QAAQsB,GACXF,EAAcE,IAGhB,CACLC,mBAlCiBC,IACC,IAAdlB,IAKJC,EAAOkB,KAAKD,GACZhB,EAAUR,QAAQI,GAClBI,EAAYZ,MA2BZc,sBAAAA,qDC5FFA,EACAgB,SAEYf,yBAEG,MAAMa,KAASd,EACxBgB,EAAKC,KAAKH,GAEZE,EAAKE,WACL,MAAON,GACPI,EAAKG,MAAMP,KAGfQ,GAEO,WACLpB,EAAsBO,QAAtBP,EAAsBO,4CCrBxBc,SAGmB,iBAAVA,GACG,OAAVA,IAIwC,mBAAtCA,EAAc5B,OAAO6B,cACpB7B,OAAO8B,eAAiB9B,OAAO8B,iBAAiBF,8CCHrDG,UAEMX,UACJA,EADIb,sBAEJA,GACEL,IACE8B,EAAUD,EAAK,CACnBP,KAAOH,IACLD,EAAUC,IAEZI,SAAU,KACRlB,EAAsBO,UAExBY,MAAQP,IACNZ,EAAsBW,MAAOC,MAG3BN,EAAiBN,EAAsBO,WACzCmB,OAA6DC,SACjE3B,EAAsBO,OAAS,UACToB,IAAhBD,IACFD,IACAC,EAAcpB,KAEToB,GAEF1B"}